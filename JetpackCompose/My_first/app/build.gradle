plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}
apply plugin: 'kotlin-kapt'

android {
    compileSdk 31

    defaultConfig {
        buildConfigField("String","API_ID",API_ID)
        buildConfigField("String","API_SECRET",API_SECRET)
        applicationId "com.example.my_first"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.10'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.activity:activity-compose:1.3.0-alpha06'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"

    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"

}

apply plugin: 'jacoco'

jacoco{
    toolVersion = "0.8.7"
    reportsDir = file("${buildDir}/reports")
}

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.3.0"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //paging
    def paging_version = "3.1.0"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation "androidx.paging:paging-compose:1.0.0-alpha14"

    //sharedPreference
    def preference_version = "1.1.1"
    implementation "androidx.preference:preference-ktx:$preference_version"

task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest'){
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    def coverageSourceDirs = ['src/main/java']

    classDirectories.from = fileTree(
            dir: "${buildDir}/intermediates/javac/debug/classes",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'com/android/**/*.class']
    )

    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    //java compiled classes
    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: ['**/R.class',
                                                                                                   '**/R$*.class',
                                                                                                   '**/BuildConfig.*',
                                                                                                   '**/Manifest*.*',
                                                                                                   'com/android/**/*.class'])
//kotlin compiled classes
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: ['**/R.class',
                                                                                            '**/R$*.class',
                                                                                            '**/BuildConfig.*',
                                                                                            '**/Manifest*.*',
                                                                                            'com/android/**/*.class'])
//...etc...
    classDirectories.from = files([javaTree, kotlinTree])

    reports{
        html.enabled = true
    }

}